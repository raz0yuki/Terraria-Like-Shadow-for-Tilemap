using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Tilemaps;

public class Shadow : MonoBehaviour
{
	[SerializeField]
	Tilemap mainTile; //メインタイルマップ　影を与えたいタイルマップを指定してください
	[SerializeField]
	Tilemap shadowTile; //影タイルマップ　メインタイルマップより手前に表示されるようにしてください
	[SerializeField]
	TileBase shadowTileBase; //影タイルマップに使うタイルを指定してください
	
	[SerializeField]
	Transform camera; //カメラ
	
	[SerializeField]
	Vector2Int simulateSize = new Vector2Int(); //カメラを中心に、シミュレートサイズ*2の範囲で影が作られます
	
	[SerializeField]
	float skipTime = 0.005f; //処理時間がこれ以上掛かる場合、次のフレームにスキップしてカクつきを抑えます
	
	[SerializeField]
	int lightStrength = 7; //タイルマップの中に光が広がる範囲
	
	void Start()
	{
		mainTile.CompressBounds();
		shadowTile.transform.localScale = new Vector3(0.5f,0.5f, 1);
		shadowTile.color = Color.black;
		StartCoroutine(Process_Update());
	}
			
	Dictionary<Vector3Int, float> brights = new Dictionary<Vector3Int, float>();
	
	IEnumerator Process_Update(){
		
		float t = Time.realtimeSinceStartup + skipTime;
		
		while(true){
			int ls = Mathf.FloorToInt(lightStrength / 2f);
			Vector2Int min = new Vector2Int(Mathf.FloorToInt(camera.position.x) - simulateSize.x - ls, Mathf.FloorToInt(camera.position.y) - simulateSize.y - ls);
			Vector2Int max = new Vector2Int(Mathf.CeilToInt(camera.position.x) + simulateSize.x + ls, Mathf.CeilToInt(camera.position.y) + simulateSize.y + ls);
		
			Vector3Int origin = mainTile.origin;
			Vector3Int size = mainTile.size;
			
			List<Vector3Int> surfaces = new List<Vector3Int>();
			
			Vector3Int shadow_min = Vector3Int.zero;
			Vector3Int shadow_max = Vector3Int.zero;
		
			for(int x = min.x; x <= max.x; x++){
				for(int y = min.y; y <= max.y; y++){
					Vector3Int pos = new Vector3Int(x,y);
					bool here = mainTile.HasTile(pos);
					
					if(here && !shadowTile.HasTile(pos * 2)){
						
						var pos_n = pos * 2;
						var pos_u = pos * 2 + Vector3Int.up;
						var pos_r = pos * 2 + Vector3Int.right;
						var pos_o = pos * 2 + new Vector3Int(1,1);
						
						int st = lightStrength;
						
						if(!shadowTile.HasTile(pos_n)){
							shadowTile.SetTile(pos_n, shadowTileBase);
							shadowTile.SetTileFlags(pos_n, TileFlags.None);
						}
						if(!shadowTile.HasTile(pos_u)){
							shadowTile.SetTile(pos_u, shadowTileBase);
							shadowTile.SetTileFlags(pos_u, TileFlags.None);
						}
						if(!shadowTile.HasTile(pos_r)){
							shadowTile.SetTile(pos_r, shadowTileBase);
							shadowTile.SetTileFlags(pos_r, TileFlags.None);
						}
						if(!shadowTile.HasTile(pos_o)){
							shadowTile.SetTile(pos_o, shadowTileBase);
							shadowTile.SetTileFlags(pos_o, TileFlags.None);
						}
						
						bool up = mainTile.HasTile(pos + Vector3Int.up);
						bool down = mainTile.HasTile(pos + Vector3Int.down);
						bool left = mainTile.HasTile(pos + Vector3Int.left);
						bool right = mainTile.HasTile(pos + Vector3Int.right);
						bool none_around = !down || !left || !up || !right;
					
						if (here && none_around)
						{
							surfaces.Add(pos_n);
							surfaces.Add(pos_u);
							surfaces.Add(pos_r);
							surfaces.Add(pos_o);
						}
					}
					
					if(Time.realtimeSinceStartup > t){
						t = Time.realtimeSinceStartup + skipTime;
						yield return null;
					}
				}
			}
			
			foreach(var s in surfaces){
				Vector3Int pos = s;
				int st = lightStrength;
						
				for(int Xfix = pos.x - st; Xfix <= pos.x + st; Xfix++){
					for(int Yfix = pos.y - st; Yfix <= pos.y + st; Yfix++){
						var POSfix = new Vector3Int(Xfix, Yfix);
						var dis = Vector3Int.Distance(pos, POSfix);
						if (dis <= st){
							var bri = ((float)st - dis) / (float)st;
							bri = Mathf.Pow(bri, 4);

							if(brights.ContainsKey(POSfix)){
								brights[POSfix] = Mathf.Max(brights[POSfix], bri);
							}else{
								brights.Add(POSfix, bri);
							}
						}
					}
				}
			}
			
			Dictionary<Vector3Int, float> delete = new Dictionary<Vector3Int, float>();
			foreach(var b in brights){
				if(shadowTile.HasTile(b.Key)){		
					shadowTile.SetTileFlags(b.Key, TileFlags.None);
					shadowTile.SetColor(b.Key, new Color(1,1,1, Mathf.Min(shadowTile.GetColor(b.Key).a, 1 - b.Value)));
					delete.Add(b.Key, b.Value);
				}
			}
			
			foreach(var d in delete){
				brights.Remove(d.Key);
			}
			yield return null;
		}
	}
}
